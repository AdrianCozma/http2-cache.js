// open h2 pull channel
confProto.openH2StreamForPush = function (pushUrl, proxyTransportUrl) {
    
    var self = this,
        pushUri, transport,
        openH2StreamForPush, reopenH2StreamForPush, // expression not function
        failures = [],
        retryTimer =  null,
        opened = false,
        reopening = false;

    self._pushMap = self._pushMap || {};
    if (self._pushMap[pushUri.href]) {
        return self._pushMap[pushUri.href];
    }

    if (self.debug) {
        self._log.info('Opening h2 channel for Push Promises: ' + pushUrl);
    }

    reopenH2StreamForPush = function reopenH2StreamForPush(err) {
        opened = true;
        self._log.warn(pushUrl + " push channel closed.");

        if (err) {
            failures.push(err);
            self._log.warn("Server push stream error: " + err);

            if (reopening === false) {
                var delay = failures.length * 100;
                self._log.warn("Server push stream already reopening in " + delay + "ms .");
                retryTimer = setTimeout(openH2StreamForPush.bind(null, pushUri, transport), delay);
            } else {
                self._log.warn("Server push stream already reopening.");
            }
        }
    }

    openH2StreamForPush = function (pushUri, transport) {

        if (opened === true) {
            throw new Error("Server push stream already opened.")
        }

        reopening = true;
        opened = true;

        var request = http2.raw.request({
            hostname: pushUri.hostname,
            port: pushUri.port,
            path: pushUri.path,
            transportUrl: proxyTransportUrl,
            transport: transport,
            agent: self.agent
        }, function (response) {
            if(self.debug){
                self._log.info("push channel opened: " + pushUrl);
            }
            response.on('finish', reopenH2StreamForPush);
            response.on('error', reopenH2StreamForPush);
            response.on('open', function () {
                opened = true;
            });
        });

        request.on('error', reopenH2StreamForPush);

        // add to cache when receive pushRequest
        request.on('push', function (pushRequest) {
            self.onPush(pushRequest);
        });

        request.end();

        return request;
    }

    pushUri = parseUrl(pushUrl);
    transport = self.getTransport(proxyTransportUrl);
    request = self._pushMap[pushUri.href] = openH2StreamForPush(pushUri, transport);

    return request;
};